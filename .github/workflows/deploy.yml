name: Deploy

on:
  push:
    tags:
      - '*' # Run on all tags
    branches-ignore:
      - '**' # Ignore pushes to branches

env:
  SUBMODULE_TOKEN_PRESENT: ${{ secrets.SUBMODULE_REPOSITORY_TOKEN != '' }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Docker images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: vars
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          ENVIRONMENT="production"

          if [[ "$TAG" == *"-"* ]]; then
            ENVIRONMENT="${TAG##*-}"
          fi

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Install docker-decompose
        run: npm i -g shawiizz-decomposerize

      - name: Build and export Docker images (${{ steps.vars.outputs.env }})
        run: |
          # Load env variables
          while read -r line; do
          [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] && export "$line"
          done < deployment/env/.env.${{ steps.vars.outputs.env }}
          export ENV=${{ steps.vars.outputs.env }}
          export VERSION=${{ steps.vars.outputs.tag }}

          cd deployment/docker
          IFS=',' read -ra SERVICES <<< "$DEPLOY_DOCKER_SERVICES"
          for SERVICE in "${SERVICES[@]}"; do
            echo "Building service: $SERVICE"

            BUILD_CMD=$(decomposerize compose-deploy.yml --services="$SERVICE" --docker-build)
            echo "Running: $BUILD_CMD"
            eval "$BUILD_CMD"

            IMAGE_NAME=$(echo "$BUILD_CMD" | sed -nE 's/.*-t\s+"?([^"]+)"?.*/\1/p')
            IMAGE_NAME=$(eval echo "$IMAGE_NAME")
            echo "Image built: $IMAGE_NAME"

            TAR_NAME="${IMAGE_NAME//:/-}.tar"
            docker save -o "$TAR_NAME" "$IMAGE_NAME"

            echo "::group::Upload $TAR_NAME"
            echo "artifact: image-${SERVICE}"
            echo "Path: $(realpath "$TAR_NAME")"
            echo "::endgroup::"
          done

      - name: Upload image artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: 'deployment/docker/*.tar'
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    name: Deploy with Ansible
    needs: build
    steps:
      - name: Checkout code with token
        if: env.SUBMODULE_TOKEN_PRESENT == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.SUBMODULE_REPOSITORY_TOKEN }}

      - name: Checkout code without token
        if: env.SUBMODULE_TOKEN_PRESENT != 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Update ansible submodule
        run: |
          git submodule update --init --recursive --remote --force ansible

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ./docker_images

      - name: Set environment variables
        id: vars
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          if [[ "$TAG" == *"-"* ]]; then
            ENV="${TAG##*-}"
          else
            ENV="production"
          fi
          
          SSH_SECRET_NAME="$(echo "${ENV}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "SSH_KEY_SECRET_NAME=$SSH_SECRET_NAME" >> $GITHUB_ENV

      - name: Setup SSH Key & Run Ansible (${{ steps.vars.outputs.env }})
        run: |
          # Load env variables
          while read -r line; do
            [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] && export "$line"
          done < deployment/env/.env.${{ steps.vars.outputs.env }}

          # Inject secrets into env (including SSH keys)
          echo '${{ toJSON(secrets) }}' > secrets.json

          for secret in $(echo "$USE_SECRETS,$DEPLOY_PRIVATE_SSH_KEYS" | tr ',' '\n' | xargs); do
            value=$(jq -r --arg key "$secret" '.[$key] // empty' secrets.json)
            [ -n "$value" ] && export "$secret=$value"
          done

          export ENV=${{ steps.vars.outputs.env }}
          export VERSION=${{ steps.vars.outputs.tag }}

          # SSH Setup
          mkdir -p ansible/ssh
          echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" | tr -d '\r' > ansible/ssh/${{ steps.vars.outputs.env }}_private_key
          chmod 600 ansible/ssh/*
          eval "$(ssh-agent -s)"
          ssh-add ansible/ssh/${{ steps.vars.outputs.env }}_private_key

          # Run Ansible
          cd ansible
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_BECOME_PASSWORD=${{ secrets.ANSIBLE_BECOME_PASSWORD }}

          npm i -g shawiizz-decomposerize
          ansible-galaxy role install geerlingguy.docker
          ansible-playbook -i hosts.yml deploy.yml --skip-tags "configure_host"
